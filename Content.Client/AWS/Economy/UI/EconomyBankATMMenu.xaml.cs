using Content.Client.UserInterface.Controls;
using Content.Shared.AW.Economy;
using Content.Client.AW.Economy.UI;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Robust.Client.UserInterface.Controls;

namespace Content.Client.AWS.Economy.UI;

[GenerateTypedNameReferences]
public sealed partial class EconomyBankATMMenu : FancyWindow
{
    private EconomyBankATMBoundUserInteface Owner { get; set; }

    private EconomyBankATMAccountInfo? _bankAccount;

    public EconomyBankATMMenu(EconomyBankATMBoundUserInteface owner)
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        Owner = owner;

        SetupMoneySpinBox(WithdrawAmountBox);
        WithdrawAmountBox.ValueChanged += args =>
        {
            RefreshWithdrawButton();
        };
        WithdrawButton.OnPressed += _ => Owner.OnWithdrawPressed((ulong) WithdrawAmountBox.Value);

        SetupMoneySpinBox(TransferAmountBox);
        TransferAmountBox.ValueChanged += args =>
        {
            RefreshTransferButton();
        };
        TransferButton.OnPressed += _ => Owner.OnWithdrawPressed((ulong) WithdrawAmountBox.Value);

        RefreshWithdrawButton();
        RefreshTransferButton();
        RefreshAccountInfo();
    }

    public override void Close()
    {
        base.Close();
    }

    public void SetBankAcount(EconomyBankATMAccountInfo? bankAccount)
    {
        _bankAccount = bankAccount;
        RefreshWithdrawButton();
        RefreshTransferButton();
        RefreshAccountInfo();
    }

    public void SetError(string? error)
    {
        ErrorLabel.Text = error;
    }

    private void RefreshWithdrawButton()
    {
        var isEnabled = _bankAccount is not null &&
            !_bankAccount.Blocked &&
            _bankAccount.Balance >= (ulong) WithdrawAmountBox.Value;
        WithdrawButton.Disabled = !isEnabled;
    }

    private void RefreshTransferButton()
    {
        var isEnabled = _bankAccount is not null &&
            !_bankAccount.Blocked &&
            _bankAccount.Balance >= (ulong) TransferAmountBox.Value;
        TransferButton.Disabled = !isEnabled;
    }

    private void RefreshAccountInfo()
    {
        AccountIdLabel.Text = _bankAccount?.AccountId ?? "-";
        AccountOwnerLabel.Text = _bankAccount?.AccountName ?? "-";
        AccountBalanceLabel.Text = _bankAccount?.Balance.ToString("N0") ?? "-";
    }

    private void SetupMoneySpinBox(SpinBox spinBox)
    {
        spinBox.AddLeftButton(-1000, "-1000");
        spinBox.AddLeftButton(-100, "-100");
        spinBox.AddLeftButton(-10, "-10");
        spinBox.AddLeftButton(-1, "-1");
        spinBox.AddRightButton(1, "+1");
        spinBox.AddRightButton(10, "+10");
        spinBox.AddRightButton(100, "+100");
        spinBox.AddRightButton(1000, "+1000");
        spinBox.IsValid = amount => amount >= 0 && _bankAccount is { } && (ulong) amount <= _bankAccount.Balance;
    }
}
